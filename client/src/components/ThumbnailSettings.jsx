import { useState, useEffect } from 'react';
import '../styles/ThumbnailSettings.css';
import { 
  Image, 
  Clock, 
  Grid, 
  Download, 
  Info, 
  RotateCcw, 
  Plus, 
  X, 
  AlertTriangle, 
  Play, 
  Monitor,
  Shield,
  Settings,
  Target,
  Zap
} from 'lucide-react';

const ThumbnailSettings = ({ 
  thumbnailSettings, 
  onThumbnailChange, 
  onToggleThumbnails,
  videoFile,
  videoMetadata = null,
  preserveOriginal = false
}) => {
  const [customTimestamp, setCustomTimestamp] = useState('00:00:00');
  const [timestampError, setTimestampError] = useState('');
  const [duplicateWarning, setDuplicateWarning] = useState('');

  const handleSettingChange = (key, value) => {
    const newSettings = {
      ...thumbnailSettings,
      [key]: value
    };
    console.log(`🔧 Updating thumbnail setting ${key}:`, value, 'New settings:', newSettings);
    onThumbnailChange(newSettings);
  };

  const resetToDefaults = () => {
    const defaultSettings = {
      enabled: thumbnailSettings.enabled,
      mode: 'interval',
      interval: 10,
      customTimestamps: [],
      width: 160,
      height: 90,
      spriteColumns: 10,
      quality: 85,
      generateSprite: false,
      generateVTT: false,
      thumbnailOnly: false
    };
    console.log('🔄 Resetting thumbnail settings to defaults:', defaultSettings);
    onThumbnailChange(defaultSettings);
  };

  // Parse timestamp string to seconds
  const parseTimestamp = (timestamp) => {
    const parts = timestamp.split(':');
    if (parts.length !== 3) return null;
    
    const hours = parseInt(parts[0]) || 0;
    const minutes = parseInt(parts[1]) || 0;
    const seconds = parseInt(parts[2]) || 0;
    
    return hours * 3600 + minutes * 60 + seconds;
  };

  // Format seconds to HH:MM:SS
  const formatTimestamp = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  // Validate timestamp
  const validateTimestamp = (timestamp) => {
    const seconds = parseTimestamp(timestamp);
    if (seconds === null || seconds < 0) {
      return 'Invalid timestamp format. Use HH:MM:SS';
    }
    
    if (videoMetadata && videoMetadata.duration && seconds > videoMetadata.duration) {
      return `Timestamp exceeds video duration (${formatTimestamp(Math.floor(videoMetadata.duration))})`;
    }
    
    const existingSeconds = thumbnailSettings.customTimestamps?.map(ts => parseTimestamp(ts)) || [];
    if (existingSeconds.includes(seconds)) {
      return 'This timestamp already exists';
    }
    
    if (thumbnailSettings.mode === 'both' || thumbnailSettings.mode === 'interval') {
      const intervalSeconds = [];
      const maxDuration = videoMetadata?.duration || 3600;
      for (let i = 0; i < maxDuration; i += thumbnailSettings.interval) {
        intervalSeconds.push(i);
      }
      
      if (intervalSeconds.includes(seconds)) {
        return `This timestamp will be generated by interval (every ${thumbnailSettings.interval}s)`;
      }
    }
    
    return null;
  };

  // Add custom timestamp
  const addCustomTimestamp = () => {
    console.log('➕ Adding custom timestamp:', customTimestamp);
    
    const error = validateTimestamp(customTimestamp);
    if (error) {
      setTimestampError(error);
      console.log('❌ Timestamp validation error:', error);
      return;
    }
    
    if ((thumbnailSettings.customTimestamps?.length || 0) >= 10) {
      setTimestampError('Maximum 10 custom timestamps allowed');
      return;
    }
    
    const newTimestamps = [...(thumbnailSettings.customTimestamps || []), customTimestamp];
    newTimestamps.sort((a, b) => parseTimestamp(a) - parseTimestamp(b));
    
    console.log('📝 New custom timestamps array:', newTimestamps);
    handleSettingChange('customTimestamps', newTimestamps);
    setCustomTimestamp('00:00:00');
    setTimestampError('');
    setDuplicateWarning('');
  };

  // Remove custom timestamp
  const removeCustomTimestamp = (index) => {
    console.log('➖ Removing custom timestamp at index:', index);
    const newTimestamps = [...(thumbnailSettings.customTimestamps || [])];
    newTimestamps.splice(index, 1);
    console.log('📝 Updated custom timestamps array:', newTimestamps);
    handleSettingChange('customTimestamps', newTimestamps);
  };

  // Handle timestamp input change
  const handleTimestampChange = (value) => {
    const cleaned = value.replace(/[^\d:]/g, '');
    const parts = cleaned.split(':');
    
    if (parts.length <= 3) {
      let formatted = cleaned;
      
      if (cleaned.length === 2 && !cleaned.includes(':')) {
        formatted = cleaned + ':';
      } else if (cleaned.length === 5 && cleaned.split(':').length === 2) {
        formatted = cleaned + ':';
      }
      
      setCustomTimestamp(formatted);
      setTimestampError('');
    }
  };

  // Enhanced mode change handler
  const handleModeChange = (newMode) => {
    console.log('🎯 Changing thumbnail mode from', thumbnailSettings.mode, 'to', newMode);
    
    const newSettings = {
      ...thumbnailSettings,
      mode: newMode
    };
    
    if (newMode === 'custom') {
      newSettings.generateSprite = false;
      newSettings.generateVTT = false;
      console.log('🔧 Custom mode: Disabling sprite and VTT generation');
    } else if (newMode === 'interval') {
      newSettings.generateSprite = true;
      newSettings.generateVTT = true;
      console.log('🔧 Interval mode: Enabling sprite and VTT generation');
    } else if (newMode === 'both') {
      newSettings.generateSprite = true;
      newSettings.generateVTT = true;
      console.log('🔧 Both mode: Enabling sprite and VTT generation for interval thumbnails');
    }
    
    onThumbnailChange(newSettings);
  };

  // Calculate estimated thumbnails based on mode
  const calculateEstimatedThumbnails = () => {
    const duration = videoMetadata?.duration || 300;
    let count = 0;
    
    if (thumbnailSettings.mode === 'interval' || thumbnailSettings.mode === 'both') {
      const interval = thumbnailSettings.interval || 10;
      if (interval > 0) {
        count += Math.floor(duration / interval);
      }
    }
    
    if (thumbnailSettings.mode === 'custom' || thumbnailSettings.mode === 'both') {
      count += thumbnailSettings.customTimestamps?.length || 0;
    }
    
    return isNaN(count) ? 0 : count;
  };

  const calculateSpriteSize = () => {
    const duration = videoMetadata?.duration || 300;
    const intervalThumbnails = (thumbnailSettings.mode === 'interval' || thumbnailSettings.mode === 'both') 
      ? Math.floor(duration / thumbnailSettings.interval) 
      : 0;
    
    const rows = Math.ceil(intervalThumbnails / thumbnailSettings.spriteColumns);
    const spriteWidth = thumbnailSettings.width * thumbnailSettings.spriteColumns;
    const spriteHeight = thumbnailSettings.height * rows;
    return { width: spriteWidth, height: spriteHeight, thumbnails: intervalThumbnails };
  };

  // Initialize mode if not set
  useEffect(() => {
    if (!thumbnailSettings.mode) {
      console.log('🔧 Initializing thumbnail mode to interval');
      handleSettingChange('mode', 'interval');
    }
  }, []);

  if (!videoFile) {
    return (
      <div className="empty-state">
        <div className="empty-icon">
          <Image size={48} />
        </div>
        <h3 className="empty-title">Upload a video first</h3>
        <p className="empty-description">
          Please upload a video file to access thumbnail settings
        </p>
      </div>
    );
  }

  const spriteInfo = calculateSpriteSize();
  const estimatedThumbnails = calculateEstimatedThumbnails();

  return (
    <main className="thumbnail-settings-container">
      {/* Preserve Original Notice */}
      {preserveOriginal && (
        <aside className="flowing-card preserve-notice" role="note" aria-label="Quality Preservation Mode">
          <div className="preserve-notice-content">
            <div className="preserve-notice-icon">
              <Shield size={16} />
            </div>
            <div className="preserve-notice-text">
              <h4 className="preserve-notice-title">
                Quality Preservation Mode
              </h4>
              <p className="preserve-notice-description">
                Thumbnails generated with minimal processing impact
              </p>
            </div>
          </div>
        </aside>
      )}

      <div className="thumbnail-settings-grid">
        
        {/* Left Column - Settings */}
        <section className="thumbnail-settings-left" aria-label="Thumbnail Settings Controls">
          
          {/* Enable Thumbnails */}
          <section className="flowing-card thumbnail-settings-card" aria-labelledby="thumbnail-generation-title">
            <header className="thumbnail-settings-header">
              <div className="thumbnail-settings-icon">
                <Image size={16} />
              </div>
              <div>
                <h3 id="thumbnail-generation-title" className="thumbnail-settings-title">
                  Thumbnail Generation
                </h3>
              </div>
            </header>

            {/* Enable Toggle */}
            <div className="enable-toggle-section">
              <label className="checkbox-card">
                <input
                  type="checkbox"
                  checked={thumbnailSettings.enabled}
                  onChange={(e) => {
                    console.log('🎬 Toggling thumbnails:', e.target.checked);
                    onToggleThumbnails(e.target.checked);
                  }}
                  className="checkbox-input"
                  aria-label="Enable Video Thumbnails"
                />
                <div className="checkbox-content">
                  <div className="checkbox-info">
                    <div>
                      <div className="checkbox-title">Enable Video Thumbnails</div>
                      <p className="checkbox-description">
                        Create preview images from your video at specific timestamps
                      </p>
                    </div>
                  </div>
                </div>
              </label>
            </div>

            {/* Thumbnail-Only Mode */}
            {thumbnailSettings.enabled && (
              <div>
                <label className="checkbox-card">
                  <input
                    type="checkbox"
                    checked={thumbnailSettings.thumbnailOnly}
                    onChange={(e) => {
                      console.log('🎬 Toggling thumbnail-only mode:', e.target.checked);
                      handleSettingChange('thumbnailOnly', e.target.checked);
                    }}
                    className="checkbox-input"
                    aria-label="Enable Thumbnail-Only Mode"
                  />
                  <div className="checkbox-content">
                    <div className="checkbox-info">
                      <div>
                        <div className="checkbox-title">Thumbnail-Only Mode</div>
                        <p className="checkbox-description">
                          Generate only thumbnails and skip video transcoding for faster processing
                        </p>
                      </div>
                    </div>
                  </div>
                </label>
              </div>
            )}
          </section>

          {/* Generation Mode */}
          {thumbnailSettings.enabled && (
            <section className="flowing-card card-content" aria-labelledby="generation-mode-title">
              <header className="card-header">
                <div className="card-header-icon">
                  <Settings size={16} />
                </div>
                <div>
                  <h3 id="generation-mode-title" className="card-header-title">
                    Generation Mode
                  </h3>
                </div>
              </header>

              <fieldset className="generation-mode-grid">
                <legend className="visually-hidden">Choose Thumbnail Generation Mode</legend>
                <label className={`generation-mode-option ${thumbnailSettings.mode === 'interval' ? 'selected' : 'unselected'}`}>
                  <input
                    type="radio"
                    name="thumbnailMode"
                    checked={thumbnailSettings.mode === 'interval'}
                    onChange={() => handleModeChange('interval')}
                    aria-label="Intervals Mode: Auto-generate thumbnails"
                  />
                  <Clock size={20} className={`generation-mode-icon ${thumbnailSettings.mode === 'interval' ? 'selected' : 'unselected'}`} />
                  <span className="generation-mode-label">
                    Intervals
                  </span>
                  <span className="generation-mode-description">
                    Auto-generate
                  </span>
                </label>

                <label className={`generation-mode-option ${thumbnailSettings.mode === 'custom' ? 'selected' : 'unselected'}`}>
                  <input
                    type="radio"
                    name="thumbnailMode"
                    checked={thumbnailSettings.mode === 'custom'}
                    onChange={() => handleModeChange('custom')}
                    aria-label="Custom Mode: Pick specific times for thumbnails"
                  />
                  <Play size={20} className={`generation-mode-icon ${thumbnailSettings.mode === 'custom' ? 'selected' : 'unselected'}`} />
                  <span className="generation-mode-label">
                    Custom
                  </span>
                  <span className="generation-mode-description">
                    Pick times
                  </span>
                </label>

                <label className={`generation-mode-option ${thumbnailSettings.mode === 'both' ? 'selected' : 'unselected'}`}>
                  <input
                    type="radio"
                    name="thumbnailMode"
                    checked={thumbnailSettings.mode === 'both'}
                    onChange={() => handleModeChange('both')}
                    aria-label="Both Modes: Combine interval and custom thumbnails"
                  />
                  <Grid size={20} className={`generation-mode-icon ${thumbnailSettings.mode === 'both' ? 'selected' : 'unselected'}`} />
                  <span className="generation-mode-label">
                    Both
                  </span>
                  <span className="generation-mode-description">
                    Combined
                  </span>
                </label>
              </fieldset>

              {/* Interval Settings */}
              {(thumbnailSettings.mode === 'interval' || thumbnailSettings.mode === 'both') && (
                <div className="interval-settings">
                  <label className="interval-label" htmlFor="interval-seconds">
                    Interval (seconds)
                  </label>
                  <input
                    type="number"
                    id="interval-seconds"
                    min="1"
                    max="300"
                    value={thumbnailSettings.interval}
                    onChange={(e) => handleSettingChange('interval', parseInt(e.target.value) || 10)}
                    className="form-input interval-input"
                    aria-describedby="interval-help-text"
                  />
                  <p id="interval-help-text" className="interval-help">
                    Generate a thumbnail every {thumbnailSettings.interval} seconds
                  </p>
                </div>
              )}
            </section>
          )}

          {/* Custom Timestamps */}
          {thumbnailSettings.enabled && (thumbnailSettings.mode === 'custom' || thumbnailSettings.mode === 'both') && (
            <section className="flowing-card card-content" aria-labelledby="custom-timestamps-title">
              <header className="card-header">
                <div className="card-header-icon">
                  <Target size={16} />
                </div>
                <div>
                  <h3 id="custom-timestamps-title" className="card-header-title">
                    Custom Timestamps
                  </h3>
                </div>
              </header>

              {/* Add Timestamp Input */}
              <div className="add-timestamp-section">
                <div className="add-timestamp-input">
                  <input
                    type="text"
                    value={customTimestamp}
                    onChange={(e) => handleTimestampChange(e.target.value)}
                    placeholder="00:00:00"
                    maxLength={8}
                    className="form-input form-input-monospace"
                    aria-label="Custom timestamp in HH:MM:SS format"
                    aria-invalid={!!timestampError}
                    aria-describedby={timestampError ? "timestamp-error-message" : undefined}
                  />
                  {timestampError && (
                    <div id="timestamp-error-message" className="add-timestamp-error" role="alert">
                      <AlertTriangle size={12} />
                      {timestampError}
                    </div>
                  )}
                </div>
                <button
                  onClick={addCustomTimestamp}
                  disabled={(thumbnailSettings.customTimestamps?.length || 0) >= 10}
                  className={`btn btn-sm timestamp-add-button ${(thumbnailSettings.customTimestamps?.length || 0) >= 10 ? 'disabled' : ''}`}
                  aria-label="Add custom timestamp"
                >
                  <Plus size={14} />
                  Add
                </button>
              </div>

              {/* Selected Timestamps */}
              {thumbnailSettings.customTimestamps && thumbnailSettings.customTimestamps.length > 0 && (
                <div className="selected-timestamps-section">
                  <h4 className="selected-timestamps-header">
                    Selected Timestamps ({thumbnailSettings.customTimestamps.length}/10):
                  </h4>
                  <ul className="selected-timestamps-container">
                    {thumbnailSettings.customTimestamps.map((timestamp, index) => (
                      <li key={index} className="selected-timestamp-tag">
                        <span>{timestamp}</span>
                        <button
                          onClick={() => removeCustomTimestamp(index)}
                          className="selected-timestamp-remove"
                          aria-label={`Remove timestamp ${timestamp}`}
                        >
                          <X size={12} />
                        </button>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </section>
          )}

          {/* Dimensions & Quality */}
          {thumbnailSettings.enabled && (
            <section className="flowing-card card-content" aria-labelledby="dimensions-quality-title">
              <header className="card-header">
                <div className="card-header-icon">
                  <Zap size={16} />
                </div>
                <div>
                  <h3 id="dimensions-quality-title" className="card-header-title">
                    Dimensions & Quality
                  </h3>
                </div>
              </header>

              <div className="dimensions-quality-grid">
                <div className="dimensions-quality-field">
                  <label className="form-label" htmlFor="thumbnail-width">
                    Width (px)
                  </label>
                  <input
                    type="number"
                    id="thumbnail-width"
                    min="80"
                    max="320"
                    value={thumbnailSettings.width}
                    onChange={(e) => handleSettingChange('width', parseInt(e.target.value) || 160)}
                    className="form-input"
                    aria-label="Thumbnail width in pixels"
                  />
                </div>
                
                <div className="dimensions-quality-field">
                  <label className="form-label" htmlFor="thumbnail-height">
                    Height (px)
                  </label>
                  <input
                    type="number"
                    id="thumbnail-height"
                    min="45"
                    max="180"
                    value={thumbnailSettings.height}
                    onChange={(e) => handleSettingChange('height', parseInt(e.target.value) || 90)}
                    className="form-input"
                    aria-label="Thumbnail height in pixels"
                  />
                </div>
              </div>

              {(thumbnailSettings.mode === 'interval' || thumbnailSettings.mode === 'both') && (
                <div className="sprite-columns-section">
                  <label className="form-label" htmlFor="sprite-columns">
                    Sprite Columns
                  </label>
                  <input
                    type="number"
                    id="sprite-columns"
                    min="5"
                    max="20"
                    value={thumbnailSettings.spriteColumns}
                    onChange={(e) => handleSettingChange('spriteColumns', parseInt(e.target.value) || 10)}
                    className="form-input"
                    aria-describedby="sprite-columns-help-text"
                    aria-label="Number of thumbnails per row in sprite sheet"
                  />
                  <p id="sprite-columns-help-text" className="sprite-columns-help-text">
                    Number of thumbnails per row in sprite sheet
                  </p>
                </div>
              )}

              <div className="quality-section">
                <label className="form-label" htmlFor="jpeg-quality">
                  JPEG Quality
                </label>
                <div className="quality-control-container">
                  <input
                    type="range"
                    id="jpeg-quality"
                    min="50"
                    max="100"
                    value={thumbnailSettings.quality}
                    onChange={(e) => handleSettingChange('quality', parseInt(e.target.value))}
                    className="quality-slider-input"
                    aria-valuenow={thumbnailSettings.quality}
                    aria-valuemin="50"
                    aria-valuemax="100"
                    aria-label="JPEG Quality slider"
                  />
                  <span className="quality-value-display">
                    {thumbnailSettings.quality}%
                  </span>
                </div>
              </div>
            </section>
          )}

          {/* Output Options */}
          {thumbnailSettings.enabled && (thumbnailSettings.mode === 'interval' || thumbnailSettings.mode === 'both') && (
            <section className="flowing-card card-content" aria-labelledby="output-options-title">
              <header className="card-header">
                <div className="card-header-icon">
                  <Download size={16} />
                </div>
                <div>
                  <h3 id="output-options-title" className="card-header-title">
                    Output Options
                  </h3>
                </div>
              </header>

              <div className="output-options-grid">
                <label className="checkbox-card">
                  <input
                    type="checkbox"
                    checked={thumbnailSettings.generateSprite}
                    onChange={(e) => handleSettingChange('generateSprite', e.target.checked)}
                    className="checkbox-input"
                    aria-label="Generate Sprite Sheet"
                  />
                  <div className="checkbox-content">
                    <div className="checkbox-info">
                      <div>
                        <div className="checkbox-title">Generate Sprite Sheet</div>
                        <p className="checkbox-description">
                          Combine interval thumbnails into a single optimized image grid
                        </p>
                      </div>
                    </div>
                  </div>
                </label>
                
                <label className="checkbox-card">
                  <input
                    type="checkbox"
                    checked={thumbnailSettings.generateVTT}
                    onChange={(e) => handleSettingChange('generateVTT', e.target.checked)}
                    className="checkbox-input"
                    aria-label="Generate WebVTT File"
                  />
                  <div className="checkbox-content">
                    <div className="checkbox-info">
                      <div>
                        <div className="checkbox-title">Generate WebVTT File</div>
                        <p className="checkbox-description">
                          Create timeline preview file for video player timeline scrubbing
                        </p>
                      </div>
                    </div>
                  </div>
                </label>
              </div>
            </section>
          )}
        </section>

        {/* Right Column - Preview & Info */}
        <aside className="flowing-card summary-right-column" aria-labelledby="summary-title">
          <header className="card-header">
            <div className="card-header-icon">
              <Monitor size={16} />
            </div>
            <div>
              <h3 id="summary-title" className="card-header-title">
                Summary
              </h3>
            </div>
          </header>

          {/* Thumbnail Stats */}
          <dl className="summary-grid">
            <div className="summary-grid-item">
              <dt className="summary-grid-label">
                Total Thumbnails
              </dt>
              <dd className="summary-grid-value">
                {thumbnailSettings.enabled ? estimatedThumbnails : '0'}
              </dd>
            </div>
            
            <div className="summary-grid-item">
              <dt className="summary-grid-label">
                Dimensions
              </dt>
              <dd className="summary-grid-value">
                {thumbnailSettings.width}×{thumbnailSettings.height}
              </dd>
            </div>

            {(thumbnailSettings.mode === 'interval' || thumbnailSettings.mode === 'both') && (
              <div className="summary-grid-item full-span">
                <dt className="summary-grid-label">
                  Sprite Size
                </dt>
                <dd className="summary-grid-value">
                  {spriteInfo.width}×{spriteInfo.height}
                </dd>
              </div>
            )}

            {(thumbnailSettings.mode === 'custom' || thumbnailSettings.mode === 'both') && (
              <div className="summary-grid-item full-span">
                <dt className="summary-grid-label">
                  Custom Times
                </dt>
                <dd className="summary-grid-value">
                  {thumbnailSettings.customTimestamps?.length || 0}
                </dd>
              </div>
            )}
          </dl>

          {/* Mode Info */}
          {thumbnailSettings.enabled && (
            <div className={`mode-info-section ${thumbnailSettings.mode === 'custom' ? 'custom-mode' : 'default-mode'}`} role="status">
              <div className="mode-info-section-header">
                <Info size={14} style={{ color: thumbnailSettings.mode === 'custom' ? 'var(--primary-color)' : 'var(--text-secondary)' }} />
                <span className="mode-info-section-title">
                  {thumbnailSettings.mode === 'interval' && 'Interval Mode'}
                  {thumbnailSettings.mode === 'custom' && 'Custom Mode Active'}
                  {thumbnailSettings.mode === 'both' && 'Combined Mode'}
                </span>
              </div>
              <p className="mode-info-section-description">
                {thumbnailSettings.mode === 'interval' && 'Thumbnails generated automatically at regular intervals'}
                {thumbnailSettings.mode === 'custom' && 'Thumbnails generated at your specified timestamps. Sprite sheets and WebVTT files are not applicable for custom timestamps.'}
                {thumbnailSettings.mode === 'both' && 'Combining interval and custom timestamps. Sprite and VTT apply to interval thumbnails only.'}
              </p>
            </div>
          )}

          {/* Settings Summary */}
          {thumbnailSettings.enabled && (
            <div className="settings-summary-section">
              <h4 className="settings-summary-section-title">
                Output Settings
              </h4>
              <ul className="settings-summary-section-content">
                <li>• Quality: {thumbnailSettings.quality}%</li>
                {(thumbnailSettings.mode === 'interval' || thumbnailSettings.mode === 'both') && (
                  <>
                    <li>• Interval: Every {thumbnailSettings.interval}s</li>
                    <li>• Sprite: {thumbnailSettings.generateSprite ? 'Enabled' : 'Disabled'}</li>
                    <li>• WebVTT: {thumbnailSettings.generateVTT ? 'Enabled' : 'Disabled'}</li>
                  </>
                )}
                {thumbnailSettings.thumbnailOnly && (
                  <li className="settings-summary-highlight">• Thumbnail-only processing</li>
                )}
              </ul>
            </div>
          )}

          {/* Reset Button */}
          {thumbnailSettings.enabled && (
            <div className="reset-button-section">
              <button
                onClick={resetToDefaults}
                className="btn btn-secondary"
                aria-label="Reset thumbnail settings to defaults"
              >
                <RotateCcw size={16} />
                Reset to Defaults
              </button>
            </div>
          )}
        </aside>
      </div>

      {/* Information Panel */}
      <section className="flowing-card info-panel-section" aria-labelledby="thumbnail-guide-title">
        <header className="card-header">
          <div className="card-header-icon">
            <Info size={16} />
          </div>
          <div>
            <h3 id="thumbnail-guide-title" className="card-header-title">
              Thumbnail Generation Guide
            </h3>
          </div>
        </header>
        
        <div className="info-guide-grid">
          <div>
            <h4 className="info-guide-section-title">
              Generation Modes
            </h4>
            <ul className="info-guide-section-list">
              <li><strong>Interval Mode:</strong> Generates thumbnails automatically at regular intervals</li>
              <li><strong>Custom Mode:</strong> Generates thumbnails at specific timestamps you choose</li>
              <li><strong>Both Mode:</strong> Combines interval and custom timestamps (duplicates are removed)</li>
            </ul>
          </div>
          
          <div>
            <h4 className="info-guide-section-title">
              Output Options
            </h4>
            <ul className="info-guide-section-list">
              <li><strong>Sprite sheets:</strong> Only available for interval thumbnails</li>
              <li><strong>WebVTT files:</strong> Only generated for interval thumbnails for player compatibility</li>
              <li><strong>Custom thumbnails:</strong> Provided as individual images with timestamp metadata</li>
            </ul>
          </div>

          <div>
            <h4 className="info-guide-section-title">
              Best Practices
            </h4>
            <ul className="info-guide-section-list">
              <li>Use 10-30 second intervals for optimal coverage</li>
              <li>160×90 provides good quality at reasonable file sizes</li>
              <li>Quality 85% balances size and visual quality</li>
              <li>Custom timestamps for important scenes or chapters</li>
            </ul>
          </div>
        </div>
      </section>

    </main>
  );
};

export default ThumbnailSettings;